import isNil from 'lodash/isNil';
import Operation from '../Operation';
import operationClearAll from '../operations/operationClearAll';
import IDENTIFIER_CLEAR_ALL from '../operations/operationClearAll/identifier';
import operationRemoveField from '../operations/operationRemoveField';
import IDENTIFIER_REMOVE_FIELD from '../operations/operationRemoveField/identifier';
import operationSetField from '../operations/operationSetField';
import IDENTIFIER_SET_FIELD from '../operations/operationSetField/identifier';
import operationSetManyFields from '../operations/operationSetManyFields';
import IDENTIFIER_SET_MANY_FIELDS from '../operations/operationSetManyFields/identifier';
import DeltaObject from '../typedef/DeltaObject';
import isReduxActionRelevantToVitaEntity from '../util/isReduxActionRelevantToVitaEntity';
import { KEY_IDENTIFER } from '../util/deltaCreator/constants';

class VitaEntity {
  /**
   * @param {string} strEntityName - Entity name.
   * @param {object} [objDefaultReducerState={}] - Default reducer state to be
   * returned if attempting to reduce with a null or undefined state.
   */
  constructor(strEntityName, objDefaultReducerState = {}) {
    /**
     * @private
     * @type {string}
     */
    this.strEntityName = strEntityName;

    /**
     * @private
     * @type {object}
     */
    this.objDefaultReducerState = objDefaultReducerState;

    /**
     * @private
     * @type {Map}
     */
    this.mapOperations = new Map();

    this.registerDefaultOperations();
  }

  /**
   * @returns {undefined}
   */
  clearCustomOperations = () => {
    this.mapOperations.clear();
    this.registerDefaultOperations();
  }

  /**
   * @param {string} strOperationIdentifier - Operation identifier to create
   * dispatchable raw object for.
   * @param {...*} varargs - Additional arguments to provide to operation
   * DeltaObject creator function.
   * @returns {DeltaObject} Redux-dispatchable raw object.
   * @throws {Error} If no operation with provided identifier is registered.
   */
  getDispatchableActionObjectForOperation = (strOperationIdentifier, ...varargs) => {
    const uoperation = this.mapOperations.get(strOperationIdentifier);

    if (isNil(uoperation)) {
      throw new Error(`No registered operation with identifier ${strOperationIdentifier}`);
    }

    return uoperation.createDelta(...varargs);
  };

  /**
   * @returns {DeltaObject} Redux dispatchable raw object.
   */
  getDispatchableClearAll = () => this.getDispatchableActionObjectForOperation(IDENTIFIER_CLEAR_ALL);

  /**
   * @param {string} strFieldName - Field name to remove.
   * @returns {DeltaObject} Redux-dispatachable raw object.
   */
  getDispatchableRemoveField = (strFieldName) => this.getDispatchableActionObjectForOperation(
    IDENTIFIER_REMOVE_FIELD,
    strFieldName,
  );

  /**
   * @param {string} strFieldName - Field name to set.
   * @param {*} mixedFieldValue - Field value to set.
   * @returns {DeltaObject} Redux-dispatachable raw object.
   */
  getDispatchableSetField = (strFieldName, mixedFieldValue) => this.getDispatchableActionObjectForOperation(
    IDENTIFIER_SET_FIELD,
    strFieldName,
    mixedFieldValue,
  );

  /**
   * @param {object} objFieldsToSet - Fields to set.
   * @returns {DeltaObject} Redux dispatchable raw object.
   */
  getDispatchableSetManyFields = (objFieldsToSet) => this.getDispatchableActionObjectForOperation(
    IDENTIFIER_SET_MANY_FIELDS,
    objFieldsToSet,
  );

  /**
   * @returns {string} Entity name.
   */
  getEntityName = () => this.strEntityName;

  /**
   * @param {object} [uobjCurrentReducerState] - Current Redux reducer state.
   * @param {object} objOccurringReduxAction - Occurring Redux action.
   * @returns {object} New reducer state after processing occurring Redux action.
   */
  reduce = (uobjCurrentReducerState, objOccurringReduxAction) => {
    /**
     * Reducers in Redux default to undefined. In that case, fallback to the
     * default state provided in the ctor
     */
    const objCurrentReducerState = isNil(uobjCurrentReducerState) ?
      this.objDefaultReducerState :
      uobjCurrentReducerState;

    /**
     * If the provided Redux action isn't relevant here (whether for a different
     * entity, or of an unexpected format eg. from an action not generated by
     * this library, then just return current state)
     */
    if (!isReduxActionRelevantToVitaEntity(this.strEntityName, objOccurringReduxAction)) {
      return objCurrentReducerState;
    }

    const { [KEY_IDENTIFER]: strOperationIdentifier } = objOccurringReduxAction;
    const uoperation = this.mapOperations.get(strOperationIdentifier);

    /**
     * If we have no operation registered matching the operation identifier,
     * then just return current state
     */
    if (isNil(uoperation)) {
      return objCurrentReducerState;
    }

    return uoperation.getReducerStateAfterProcessingDelta(objCurrentReducerState, objOccurringReduxAction);
  };

  /**
   * @returns {undefined}
   */
  registerDefaultOperations = () => {
    this.registerOperation(operationClearAll(this.strEntityName))
      .registerOperation(operationRemoveField(this.strEntityName))
      .registerOperation(operationSetField(this.strEntityName))
      .registerOperation(operationSetManyFields(this.strEntityName));
  };

  /**
   * @param {Operation} operation - Operation to register for entity.
   * @returns {VitaEntity} This.
   */
  registerOperation = (operation) => {
    const strOperationIdentifier = operation.getIdentifer();
    this.mapOperations.set(strOperationIdentifier, operation);
    return this;
  };

  /**
   * @param {string} strOperationIdentifier - Operation identifier to unregister.
   * @returns {VitaEntity} This.
   */
  unregisterOperationWithIdentifier = (strOperationIdentifier) => {
    this.mapOperations.delete(strOperationIdentifier);
    return this;
  }
}

export default VitaEntity;
